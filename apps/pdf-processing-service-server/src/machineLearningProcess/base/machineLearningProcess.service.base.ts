/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MachineLearningProcess as PrismaMachineLearningProcess,
  Teacher as PrismaTeacher,
  TextExtractor as PrismaTextExtractor,
} from "@prisma/client";

export class MachineLearningProcessServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MachineLearningProcessCountArgs, "select">
  ): Promise<number> {
    return this.prisma.machineLearningProcess.count(args);
  }

  async machineLearningProcesses(
    args: Prisma.MachineLearningProcessFindManyArgs
  ): Promise<PrismaMachineLearningProcess[]> {
    return this.prisma.machineLearningProcess.findMany(args);
  }
  async machineLearningProcess(
    args: Prisma.MachineLearningProcessFindUniqueArgs
  ): Promise<PrismaMachineLearningProcess | null> {
    return this.prisma.machineLearningProcess.findUnique(args);
  }
  async createMachineLearningProcess(
    args: Prisma.MachineLearningProcessCreateArgs
  ): Promise<PrismaMachineLearningProcess> {
    return this.prisma.machineLearningProcess.create(args);
  }
  async updateMachineLearningProcess(
    args: Prisma.MachineLearningProcessUpdateArgs
  ): Promise<PrismaMachineLearningProcess> {
    return this.prisma.machineLearningProcess.update(args);
  }
  async deleteMachineLearningProcess(
    args: Prisma.MachineLearningProcessDeleteArgs
  ): Promise<PrismaMachineLearningProcess> {
    return this.prisma.machineLearningProcess.delete(args);
  }

  async findTeachers(
    parentId: string,
    args: Prisma.TeacherFindManyArgs
  ): Promise<PrismaTeacher[]> {
    return this.prisma.machineLearningProcess
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .teachers(args);
  }

  async getTextExtractor(
    parentId: string
  ): Promise<PrismaTextExtractor | null> {
    return this.prisma.machineLearningProcess
      .findUnique({
        where: { id: parentId },
      })
      .textExtractor();
  }
}
