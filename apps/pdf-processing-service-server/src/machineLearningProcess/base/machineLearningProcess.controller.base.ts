/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MachineLearningProcessService } from "../machineLearningProcess.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MachineLearningProcessCreateInput } from "./MachineLearningProcessCreateInput";
import { MachineLearningProcess } from "./MachineLearningProcess";
import { MachineLearningProcessFindManyArgs } from "./MachineLearningProcessFindManyArgs";
import { MachineLearningProcessWhereUniqueInput } from "./MachineLearningProcessWhereUniqueInput";
import { MachineLearningProcessUpdateInput } from "./MachineLearningProcessUpdateInput";
import { TeacherFindManyArgs } from "../../teacher/base/TeacherFindManyArgs";
import { Teacher } from "../../teacher/base/Teacher";
import { TeacherWhereUniqueInput } from "../../teacher/base/TeacherWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MachineLearningProcessControllerBase {
  constructor(
    protected readonly service: MachineLearningProcessService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MachineLearningProcess })
  @nestAccessControl.UseRoles({
    resource: "MachineLearningProcess",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMachineLearningProcess(
    @common.Body() data: MachineLearningProcessCreateInput
  ): Promise<MachineLearningProcess> {
    return await this.service.createMachineLearningProcess({
      data: {
        ...data,

        textExtractor: data.textExtractor
          ? {
              connect: data.textExtractor,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        extractedInformation: true,
        id: true,
        processedAt: true,
        requestedInformation: true,

        textExtractor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MachineLearningProcess] })
  @ApiNestedQuery(MachineLearningProcessFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MachineLearningProcess",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async machineLearningProcesses(
    @common.Req() request: Request
  ): Promise<MachineLearningProcess[]> {
    const args = plainToClass(
      MachineLearningProcessFindManyArgs,
      request.query
    );
    return this.service.machineLearningProcesses({
      ...args,
      select: {
        createdAt: true,
        extractedInformation: true,
        id: true,
        processedAt: true,
        requestedInformation: true,

        textExtractor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MachineLearningProcess })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MachineLearningProcess",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async machineLearningProcess(
    @common.Param() params: MachineLearningProcessWhereUniqueInput
  ): Promise<MachineLearningProcess | null> {
    const result = await this.service.machineLearningProcess({
      where: params,
      select: {
        createdAt: true,
        extractedInformation: true,
        id: true,
        processedAt: true,
        requestedInformation: true,

        textExtractor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MachineLearningProcess })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MachineLearningProcess",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMachineLearningProcess(
    @common.Param() params: MachineLearningProcessWhereUniqueInput,
    @common.Body() data: MachineLearningProcessUpdateInput
  ): Promise<MachineLearningProcess | null> {
    try {
      return await this.service.updateMachineLearningProcess({
        where: params,
        data: {
          ...data,

          textExtractor: data.textExtractor
            ? {
                connect: data.textExtractor,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          extractedInformation: true,
          id: true,
          processedAt: true,
          requestedInformation: true,

          textExtractor: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MachineLearningProcess })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MachineLearningProcess",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMachineLearningProcess(
    @common.Param() params: MachineLearningProcessWhereUniqueInput
  ): Promise<MachineLearningProcess | null> {
    try {
      return await this.service.deleteMachineLearningProcess({
        where: params,
        select: {
          createdAt: true,
          extractedInformation: true,
          id: true,
          processedAt: true,
          requestedInformation: true,

          textExtractor: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/teachers")
  @ApiNestedQuery(TeacherFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Teacher",
    action: "read",
    possession: "any",
  })
  async findTeachers(
    @common.Req() request: Request,
    @common.Param() params: MachineLearningProcessWhereUniqueInput
  ): Promise<Teacher[]> {
    const query = plainToClass(TeacherFindManyArgs, request.query);
    const results = await this.service.findTeachers(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        machineLearningProcess: {
          select: {
            id: true,
          },
        },

        processedData: true,
        readyAt: true,
        sharedData: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/teachers")
  @nestAccessControl.UseRoles({
    resource: "MachineLearningProcess",
    action: "update",
    possession: "any",
  })
  async connectTeachers(
    @common.Param() params: MachineLearningProcessWhereUniqueInput,
    @common.Body() body: TeacherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teachers: {
        connect: body,
      },
    };
    await this.service.updateMachineLearningProcess({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/teachers")
  @nestAccessControl.UseRoles({
    resource: "MachineLearningProcess",
    action: "update",
    possession: "any",
  })
  async updateTeachers(
    @common.Param() params: MachineLearningProcessWhereUniqueInput,
    @common.Body() body: TeacherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teachers: {
        set: body,
      },
    };
    await this.service.updateMachineLearningProcess({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/teachers")
  @nestAccessControl.UseRoles({
    resource: "MachineLearningProcess",
    action: "update",
    possession: "any",
  })
  async disconnectTeachers(
    @common.Param() params: MachineLearningProcessWhereUniqueInput,
    @common.Body() body: TeacherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teachers: {
        disconnect: body,
      },
    };
    await this.service.updateMachineLearningProcess({
      where: params,
      data,
      select: { id: true },
    });
  }
}
