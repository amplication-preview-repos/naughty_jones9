/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MachineLearningProcess } from "./MachineLearningProcess";
import { MachineLearningProcessCountArgs } from "./MachineLearningProcessCountArgs";
import { MachineLearningProcessFindManyArgs } from "./MachineLearningProcessFindManyArgs";
import { MachineLearningProcessFindUniqueArgs } from "./MachineLearningProcessFindUniqueArgs";
import { CreateMachineLearningProcessArgs } from "./CreateMachineLearningProcessArgs";
import { UpdateMachineLearningProcessArgs } from "./UpdateMachineLearningProcessArgs";
import { DeleteMachineLearningProcessArgs } from "./DeleteMachineLearningProcessArgs";
import { TeacherFindManyArgs } from "../../teacher/base/TeacherFindManyArgs";
import { Teacher } from "../../teacher/base/Teacher";
import { TextExtractor } from "../../textExtractor/base/TextExtractor";
import { MachineLearningProcessService } from "../machineLearningProcess.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MachineLearningProcess)
export class MachineLearningProcessResolverBase {
  constructor(
    protected readonly service: MachineLearningProcessService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MachineLearningProcess",
    action: "read",
    possession: "any",
  })
  async _machineLearningProcessesMeta(
    @graphql.Args() args: MachineLearningProcessCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MachineLearningProcess])
  @nestAccessControl.UseRoles({
    resource: "MachineLearningProcess",
    action: "read",
    possession: "any",
  })
  async machineLearningProcesses(
    @graphql.Args() args: MachineLearningProcessFindManyArgs
  ): Promise<MachineLearningProcess[]> {
    return this.service.machineLearningProcesses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MachineLearningProcess, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MachineLearningProcess",
    action: "read",
    possession: "own",
  })
  async machineLearningProcess(
    @graphql.Args() args: MachineLearningProcessFindUniqueArgs
  ): Promise<MachineLearningProcess | null> {
    const result = await this.service.machineLearningProcess(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MachineLearningProcess)
  @nestAccessControl.UseRoles({
    resource: "MachineLearningProcess",
    action: "create",
    possession: "any",
  })
  async createMachineLearningProcess(
    @graphql.Args() args: CreateMachineLearningProcessArgs
  ): Promise<MachineLearningProcess> {
    return await this.service.createMachineLearningProcess({
      ...args,
      data: {
        ...args.data,

        textExtractor: args.data.textExtractor
          ? {
              connect: args.data.textExtractor,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MachineLearningProcess)
  @nestAccessControl.UseRoles({
    resource: "MachineLearningProcess",
    action: "update",
    possession: "any",
  })
  async updateMachineLearningProcess(
    @graphql.Args() args: UpdateMachineLearningProcessArgs
  ): Promise<MachineLearningProcess | null> {
    try {
      return await this.service.updateMachineLearningProcess({
        ...args,
        data: {
          ...args.data,

          textExtractor: args.data.textExtractor
            ? {
                connect: args.data.textExtractor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MachineLearningProcess)
  @nestAccessControl.UseRoles({
    resource: "MachineLearningProcess",
    action: "delete",
    possession: "any",
  })
  async deleteMachineLearningProcess(
    @graphql.Args() args: DeleteMachineLearningProcessArgs
  ): Promise<MachineLearningProcess | null> {
    try {
      return await this.service.deleteMachineLearningProcess(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Teacher], { name: "teachers" })
  @nestAccessControl.UseRoles({
    resource: "Teacher",
    action: "read",
    possession: "any",
  })
  async findTeachers(
    @graphql.Parent() parent: MachineLearningProcess,
    @graphql.Args() args: TeacherFindManyArgs
  ): Promise<Teacher[]> {
    const results = await this.service.findTeachers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TextExtractor, {
    nullable: true,
    name: "textExtractor",
  })
  @nestAccessControl.UseRoles({
    resource: "TextExtractor",
    action: "read",
    possession: "any",
  })
  async getTextExtractor(
    @graphql.Parent() parent: MachineLearningProcess
  ): Promise<TextExtractor | null> {
    const result = await this.service.getTextExtractor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
