/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TextExtractor as PrismaTextExtractor,
  MachineLearningProcess as PrismaMachineLearningProcess,
  PdfFile as PrismaPdfFile,
} from "@prisma/client";

export class TextExtractorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TextExtractorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.textExtractor.count(args);
  }

  async textExtractors(
    args: Prisma.TextExtractorFindManyArgs
  ): Promise<PrismaTextExtractor[]> {
    return this.prisma.textExtractor.findMany(args);
  }
  async textExtractor(
    args: Prisma.TextExtractorFindUniqueArgs
  ): Promise<PrismaTextExtractor | null> {
    return this.prisma.textExtractor.findUnique(args);
  }
  async createTextExtractor(
    args: Prisma.TextExtractorCreateArgs
  ): Promise<PrismaTextExtractor> {
    return this.prisma.textExtractor.create(args);
  }
  async updateTextExtractor(
    args: Prisma.TextExtractorUpdateArgs
  ): Promise<PrismaTextExtractor> {
    return this.prisma.textExtractor.update(args);
  }
  async deleteTextExtractor(
    args: Prisma.TextExtractorDeleteArgs
  ): Promise<PrismaTextExtractor> {
    return this.prisma.textExtractor.delete(args);
  }

  async findMachineLearningProcesses(
    parentId: string,
    args: Prisma.MachineLearningProcessFindManyArgs
  ): Promise<PrismaMachineLearningProcess[]> {
    return this.prisma.textExtractor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .machineLearningProcesses(args);
  }

  async getPdfFile(parentId: string): Promise<PrismaPdfFile | null> {
    return this.prisma.textExtractor
      .findUnique({
        where: { id: parentId },
      })
      .pdfFile();
  }
}
