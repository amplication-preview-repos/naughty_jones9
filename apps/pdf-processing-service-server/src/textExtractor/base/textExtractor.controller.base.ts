/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TextExtractorService } from "../textExtractor.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TextExtractorCreateInput } from "./TextExtractorCreateInput";
import { TextExtractor } from "./TextExtractor";
import { TextExtractorFindManyArgs } from "./TextExtractorFindManyArgs";
import { TextExtractorWhereUniqueInput } from "./TextExtractorWhereUniqueInput";
import { TextExtractorUpdateInput } from "./TextExtractorUpdateInput";
import { MachineLearningProcessFindManyArgs } from "../../machineLearningProcess/base/MachineLearningProcessFindManyArgs";
import { MachineLearningProcess } from "../../machineLearningProcess/base/MachineLearningProcess";
import { MachineLearningProcessWhereUniqueInput } from "../../machineLearningProcess/base/MachineLearningProcessWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TextExtractorControllerBase {
  constructor(
    protected readonly service: TextExtractorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TextExtractor })
  @nestAccessControl.UseRoles({
    resource: "TextExtractor",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTextExtractor(
    @common.Body() data: TextExtractorCreateInput
  ): Promise<TextExtractor> {
    return await this.service.createTextExtractor({
      data: {
        ...data,

        pdfFile: data.pdfFile
          ? {
              connect: data.pdfFile,
            }
          : undefined,
      },
      select: {
        cleanedTxtContent: true,
        createdAt: true,
        extractedAt: true,
        id: true,

        pdfFile: {
          select: {
            id: true,
          },
        },

        txtContent: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TextExtractor] })
  @ApiNestedQuery(TextExtractorFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TextExtractor",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async textExtractors(
    @common.Req() request: Request
  ): Promise<TextExtractor[]> {
    const args = plainToClass(TextExtractorFindManyArgs, request.query);
    return this.service.textExtractors({
      ...args,
      select: {
        cleanedTxtContent: true,
        createdAt: true,
        extractedAt: true,
        id: true,

        pdfFile: {
          select: {
            id: true,
          },
        },

        txtContent: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TextExtractor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TextExtractor",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async textExtractor(
    @common.Param() params: TextExtractorWhereUniqueInput
  ): Promise<TextExtractor | null> {
    const result = await this.service.textExtractor({
      where: params,
      select: {
        cleanedTxtContent: true,
        createdAt: true,
        extractedAt: true,
        id: true,

        pdfFile: {
          select: {
            id: true,
          },
        },

        txtContent: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TextExtractor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TextExtractor",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTextExtractor(
    @common.Param() params: TextExtractorWhereUniqueInput,
    @common.Body() data: TextExtractorUpdateInput
  ): Promise<TextExtractor | null> {
    try {
      return await this.service.updateTextExtractor({
        where: params,
        data: {
          ...data,

          pdfFile: data.pdfFile
            ? {
                connect: data.pdfFile,
              }
            : undefined,
        },
        select: {
          cleanedTxtContent: true,
          createdAt: true,
          extractedAt: true,
          id: true,

          pdfFile: {
            select: {
              id: true,
            },
          },

          txtContent: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TextExtractor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TextExtractor",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTextExtractor(
    @common.Param() params: TextExtractorWhereUniqueInput
  ): Promise<TextExtractor | null> {
    try {
      return await this.service.deleteTextExtractor({
        where: params,
        select: {
          cleanedTxtContent: true,
          createdAt: true,
          extractedAt: true,
          id: true,

          pdfFile: {
            select: {
              id: true,
            },
          },

          txtContent: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/machineLearningProcesses")
  @ApiNestedQuery(MachineLearningProcessFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MachineLearningProcess",
    action: "read",
    possession: "any",
  })
  async findMachineLearningProcesses(
    @common.Req() request: Request,
    @common.Param() params: TextExtractorWhereUniqueInput
  ): Promise<MachineLearningProcess[]> {
    const query = plainToClass(
      MachineLearningProcessFindManyArgs,
      request.query
    );
    const results = await this.service.findMachineLearningProcesses(params.id, {
      ...query,
      select: {
        createdAt: true,
        extractedInformation: true,
        id: true,
        processedAt: true,
        requestedInformation: true,

        textExtractor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/machineLearningProcesses")
  @nestAccessControl.UseRoles({
    resource: "TextExtractor",
    action: "update",
    possession: "any",
  })
  async connectMachineLearningProcesses(
    @common.Param() params: TextExtractorWhereUniqueInput,
    @common.Body() body: MachineLearningProcessWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      machineLearningProcesses: {
        connect: body,
      },
    };
    await this.service.updateTextExtractor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/machineLearningProcesses")
  @nestAccessControl.UseRoles({
    resource: "TextExtractor",
    action: "update",
    possession: "any",
  })
  async updateMachineLearningProcesses(
    @common.Param() params: TextExtractorWhereUniqueInput,
    @common.Body() body: MachineLearningProcessWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      machineLearningProcesses: {
        set: body,
      },
    };
    await this.service.updateTextExtractor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/machineLearningProcesses")
  @nestAccessControl.UseRoles({
    resource: "TextExtractor",
    action: "update",
    possession: "any",
  })
  async disconnectMachineLearningProcesses(
    @common.Param() params: TextExtractorWhereUniqueInput,
    @common.Body() body: MachineLearningProcessWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      machineLearningProcesses: {
        disconnect: body,
      },
    };
    await this.service.updateTextExtractor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
