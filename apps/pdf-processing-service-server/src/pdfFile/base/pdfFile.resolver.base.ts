/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PdfFile } from "./PdfFile";
import { PdfFileCountArgs } from "./PdfFileCountArgs";
import { PdfFileFindManyArgs } from "./PdfFileFindManyArgs";
import { PdfFileFindUniqueArgs } from "./PdfFileFindUniqueArgs";
import { CreatePdfFileArgs } from "./CreatePdfFileArgs";
import { UpdatePdfFileArgs } from "./UpdatePdfFileArgs";
import { DeletePdfFileArgs } from "./DeletePdfFileArgs";
import { TextExtractorFindManyArgs } from "../../textExtractor/base/TextExtractorFindManyArgs";
import { TextExtractor } from "../../textExtractor/base/TextExtractor";
import { PdfFileService } from "../pdfFile.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PdfFile)
export class PdfFileResolverBase {
  constructor(
    protected readonly service: PdfFileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PdfFile",
    action: "read",
    possession: "any",
  })
  async _pdfFilesMeta(
    @graphql.Args() args: PdfFileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PdfFile])
  @nestAccessControl.UseRoles({
    resource: "PdfFile",
    action: "read",
    possession: "any",
  })
  async pdfFiles(
    @graphql.Args() args: PdfFileFindManyArgs
  ): Promise<PdfFile[]> {
    return this.service.pdfFiles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PdfFile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PdfFile",
    action: "read",
    possession: "own",
  })
  async pdfFile(
    @graphql.Args() args: PdfFileFindUniqueArgs
  ): Promise<PdfFile | null> {
    const result = await this.service.pdfFile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PdfFile)
  @nestAccessControl.UseRoles({
    resource: "PdfFile",
    action: "create",
    possession: "any",
  })
  async createPdfFile(
    @graphql.Args() args: CreatePdfFileArgs
  ): Promise<PdfFile> {
    return await this.service.createPdfFile({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PdfFile)
  @nestAccessControl.UseRoles({
    resource: "PdfFile",
    action: "update",
    possession: "any",
  })
  async updatePdfFile(
    @graphql.Args() args: UpdatePdfFileArgs
  ): Promise<PdfFile | null> {
    try {
      return await this.service.updatePdfFile({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PdfFile)
  @nestAccessControl.UseRoles({
    resource: "PdfFile",
    action: "delete",
    possession: "any",
  })
  async deletePdfFile(
    @graphql.Args() args: DeletePdfFileArgs
  ): Promise<PdfFile | null> {
    try {
      return await this.service.deletePdfFile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TextExtractor], { name: "textExtractors" })
  @nestAccessControl.UseRoles({
    resource: "TextExtractor",
    action: "read",
    possession: "any",
  })
  async findTextExtractors(
    @graphql.Parent() parent: PdfFile,
    @graphql.Args() args: TextExtractorFindManyArgs
  ): Promise<TextExtractor[]> {
    const results = await this.service.findTextExtractors(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
