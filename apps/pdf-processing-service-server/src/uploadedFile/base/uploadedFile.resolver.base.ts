/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UploadedFile } from "./UploadedFile";
import { UploadedFileCountArgs } from "./UploadedFileCountArgs";
import { UploadedFileFindManyArgs } from "./UploadedFileFindManyArgs";
import { UploadedFileFindUniqueArgs } from "./UploadedFileFindUniqueArgs";
import { CreateUploadedFileArgs } from "./CreateUploadedFileArgs";
import { UpdateUploadedFileArgs } from "./UpdateUploadedFileArgs";
import { DeleteUploadedFileArgs } from "./DeleteUploadedFileArgs";
import { UploadedFileService } from "../uploadedFile.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UploadedFile)
export class UploadedFileResolverBase {
  constructor(
    protected readonly service: UploadedFileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UploadedFile",
    action: "read",
    possession: "any",
  })
  async _uploadedFilesMeta(
    @graphql.Args() args: UploadedFileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UploadedFile])
  @nestAccessControl.UseRoles({
    resource: "UploadedFile",
    action: "read",
    possession: "any",
  })
  async uploadedFiles(
    @graphql.Args() args: UploadedFileFindManyArgs
  ): Promise<UploadedFile[]> {
    return this.service.uploadedFiles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UploadedFile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UploadedFile",
    action: "read",
    possession: "own",
  })
  async uploadedFile(
    @graphql.Args() args: UploadedFileFindUniqueArgs
  ): Promise<UploadedFile | null> {
    const result = await this.service.uploadedFile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UploadedFile)
  @nestAccessControl.UseRoles({
    resource: "UploadedFile",
    action: "create",
    possession: "any",
  })
  async createUploadedFile(
    @graphql.Args() args: CreateUploadedFileArgs
  ): Promise<UploadedFile> {
    return await this.service.createUploadedFile({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UploadedFile)
  @nestAccessControl.UseRoles({
    resource: "UploadedFile",
    action: "update",
    possession: "any",
  })
  async updateUploadedFile(
    @graphql.Args() args: UpdateUploadedFileArgs
  ): Promise<UploadedFile | null> {
    try {
      return await this.service.updateUploadedFile({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UploadedFile)
  @nestAccessControl.UseRoles({
    resource: "UploadedFile",
    action: "delete",
    possession: "any",
  })
  async deleteUploadedFile(
    @graphql.Args() args: DeleteUploadedFileArgs
  ): Promise<UploadedFile | null> {
    try {
      return await this.service.deleteUploadedFile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
