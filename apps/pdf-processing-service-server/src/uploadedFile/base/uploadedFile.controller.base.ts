/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UploadedFileService } from "../uploadedFile.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UploadedFileCreateInput } from "./UploadedFileCreateInput";
import { UploadedFile } from "./UploadedFile";
import { UploadedFileFindManyArgs } from "./UploadedFileFindManyArgs";
import { UploadedFileWhereUniqueInput } from "./UploadedFileWhereUniqueInput";
import { UploadedFileUpdateInput } from "./UploadedFileUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UploadedFileControllerBase {
  constructor(
    protected readonly service: UploadedFileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UploadedFile })
  @nestAccessControl.UseRoles({
    resource: "UploadedFile",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createUploadedFile(
    @common.Body() data: UploadedFileCreateInput
  ): Promise<UploadedFile> {
    return await this.service.createUploadedFile({
      data: data,
      select: {
        createdAt: true,
        fileName: true,
        fileSize: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [UploadedFile] })
  @ApiNestedQuery(UploadedFileFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UploadedFile",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async uploadedFiles(@common.Req() request: Request): Promise<UploadedFile[]> {
    const args = plainToClass(UploadedFileFindManyArgs, request.query);
    return this.service.uploadedFiles({
      ...args,
      select: {
        createdAt: true,
        fileName: true,
        fileSize: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UploadedFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UploadedFile",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async uploadedFile(
    @common.Param() params: UploadedFileWhereUniqueInput
  ): Promise<UploadedFile | null> {
    const result = await this.service.uploadedFile({
      where: params,
      select: {
        createdAt: true,
        fileName: true,
        fileSize: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UploadedFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UploadedFile",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateUploadedFile(
    @common.Param() params: UploadedFileWhereUniqueInput,
    @common.Body() data: UploadedFileUpdateInput
  ): Promise<UploadedFile | null> {
    try {
      return await this.service.updateUploadedFile({
        where: params,
        data: data,
        select: {
          createdAt: true,
          fileName: true,
          fileSize: true,
          id: true,
          updatedAt: true,
          uploadDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UploadedFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UploadedFile",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUploadedFile(
    @common.Param() params: UploadedFileWhereUniqueInput
  ): Promise<UploadedFile | null> {
    try {
      return await this.service.deleteUploadedFile({
        where: params,
        select: {
          createdAt: true,
          fileName: true,
          fileSize: true,
          id: true,
          updatedAt: true,
          uploadDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
