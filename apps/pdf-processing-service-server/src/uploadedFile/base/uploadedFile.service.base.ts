/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UploadedFile as PrismaUploadedFile } from "@prisma/client";

export class UploadedFileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UploadedFileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.uploadedFile.count(args);
  }

  async uploadedFiles(
    args: Prisma.UploadedFileFindManyArgs
  ): Promise<PrismaUploadedFile[]> {
    return this.prisma.uploadedFile.findMany(args);
  }
  async uploadedFile(
    args: Prisma.UploadedFileFindUniqueArgs
  ): Promise<PrismaUploadedFile | null> {
    return this.prisma.uploadedFile.findUnique(args);
  }
  async createUploadedFile(
    args: Prisma.UploadedFileCreateArgs
  ): Promise<PrismaUploadedFile> {
    return this.prisma.uploadedFile.create(args);
  }
  async updateUploadedFile(
    args: Prisma.UploadedFileUpdateArgs
  ): Promise<PrismaUploadedFile> {
    return this.prisma.uploadedFile.update(args);
  }
  async deleteUploadedFile(
    args: Prisma.UploadedFileDeleteArgs
  ): Promise<PrismaUploadedFile> {
    return this.prisma.uploadedFile.delete(args);
  }
}
